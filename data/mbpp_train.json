{
    "prompts": [
        "Write a function to find the longest chain which can be formed from the given set of pairs.",
        "Write a python function to find the first repeated character in a given string.",
        "Write a function to get a lucid number smaller than or equal to n.",
        "Write a function to reverse words in a given string.",
        "Write a function to check if the given integer is a prime number.",
        "Write a function to convert degrees to radians.",
        "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
        "Write a python function to find nth bell number.",
        "Write a python function to find minimum possible value for the given periodic function.",
        "Write a python function to remove the k'th element from a given list.",
        "Write a function to find the maximum of nth column from the given tuple list.",
        "Write a python function to merge the first and last elements separately in a list of lists.",
        "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
        "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "Write a function to find average value of the numbers in a given tuple of tuples.",
        "Write a function to perfom the modulo of tuple elements in the given two tuples.",
        "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "Write a function to divide two lists using map and lambda function.",
        "Write a function to move all the numbers in it to the given string.",
        "Write a function to find the largest subset where each pair is divisible.",
        "Write a function to increment the numeric values in the given strings by k.",
        "Write a function to find the median of two sorted arrays of same size.",
        "Write a function to find the n-th power of individual elements in a list using lambda function.",
        "Write a python function to convert the given string to upper case.",
        "Write a python function to interchange first and last elements in a given list.",
        "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
        "Write a python function to find the smallest missing number from the given array.",
        "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
        "Write a python function to find even numbers from a mixed list.",
        "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
        "Write a python function to move all zeroes to the end of the given list.",
        "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
        "Write a python function to find the sum of fourth power of first n even natural numbers.",
        "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
        "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
        "Write a function to check whether the given amount has no profit and no loss",
        "Write a function to calculate wind chill index.",
        "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "Write a function to remove the parenthesis area in a string.",
        "Write a function to find the nth nonagonal number.",
        "Write a function to remove similar rows from the given tuple matrix.",
        "Write a function that matches a word containing 'z', not at the start or end of the word.",
        "Write a python function to reverse an array upto a given position.",
        "Write a function to find the product of it’s kth index in the given tuples.",
        "Write a python function to count number of cubes of size k in a cube of size n.",
        "Write a function to split a string at uppercase letters.",
        "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
        "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
        "Write a python function to check whether the given two arrays are equal or not.",
        "Write a function to check if one tuple is a subset of another tuple.",
        "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
        "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
        "Write a function to find the perimeter of a rectangle.",
        "Write a python function to find the sum of fifth power of n natural numbers.",
        "Write a python function to find the minimum sum of absolute differences of two arrays.",
        "Write a python function to find the first digit in factorial of a given number.",
        "Write a function to find the item with maximum occurrences in a given list.",
        "Write a python function to print duplicants from a list of integers.",
        "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
        "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
        "Write a function to sort a list in a dictionary.",
        "Write a function to find the largest possible value of k such that k modulo x is y.",
        "Write a python function to find the average of even numbers till a given even number.",
        "Write a python function to shift first element to the end of given list.",
        "Write a function to count occurrence of a character in a string.",
        "Write a python function to count number of vowels in the string.",
        "Write a python function to replace multiple occurence of character by single.",
        "Write a function to check whether the given ip address is valid or not using regex.",
        "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
        "Write a python function to set the right most unset bit.",
        "Write a function to find maximum of three numbers.",
        "Write a python function to convert a list of multiple integers into a single integer.",
        "Write a function to remove duplicate words from a given string using collections module.",
        "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
        "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
        "Write a function to check if the triangle is valid or not.",
        "Write a python function to remove spaces from a given string.",
        "Write a function to access dictionary key’s element by index.",
        "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
        "Write a python function to find the smallest prime divisor of a number.",
        "Write a function to multiply two lists using map and lambda function.",
        "Write a python function to check whether the given number can be represented by sum of two squares or not.",
        "Write a python function to count occurences of a character in a repeated string.",
        "Write a python function to find sum of prime numbers between 1 to n.",
        "Write a function to find the frequency of each element in the given list.",
        "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
        "Write a function to get the length of a complex number.",
        "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
        "Write a function to multiply consecutive numbers of a given list.",
        "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
        "Write a python function to find the last two digits in factorial of a given number.",
        "Write a function to remove multiple spaces in a string by using regex.",
        "Write a function to extract unique values from the given dictionary values.",
        "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
        "Write a function to zip two given lists of lists.",
        "Write a function to find number of even elements in the given list using lambda function.",
        "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
        "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
        "Write a function to count the number of elements in a list which are within a specific range.",
        "Write a function to find the equilibrium index of the given array.",
        "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
        "Write a function to check whether the given key is present in the dictionary or not.",
        "Write a function to calculate the harmonic sum of n-1.",
        "Write a function to sort a list of lists by length and value.",
        "Write a function to find whether an array is subset of another array.",
        "Write a python function to count the total set bits from 1 to n.",
        "Write a python function to convert a string to a list.",
        "Write a function to count unique keys for each value present in the tuple.",
        "Write a function to access the initial and last data of the given tuple record.",
        "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
        "Write a function to remove duplicates from a list of lists.",
        "Write a function to check if the given tuple contains all valid values or not.",
        "Write a python function to count the number of distinct power of prime factor of given number.",
        "Write a function to convert the given string of integers into a tuple.",
        "Write a function to find the perimeter of a rombus.",
        "Write a function to calculate the standard deviation.",
        "Write a function to create a list taking alternate elements from another given list.",
        "Write a function that matches a string that has an a followed by zero or more b's.",
        "Write a function to add a dictionary to the tuple.",
        "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
        "Write a function to filter the height and width of students which are stored in a dictionary.",
        "Write a function to count the same pair in two given lists using map function.",
        "Write a function to calculate the sum of all digits of the base to the specified power.",
        "Write a function to extract values between quotation marks of the given string by using regex.",
        "Write a function to multiply the adjacent elements of the given tuple.",
        "Write a function to remove all characters except letters and numbers using regex",
        "Write a function to sum elements in two lists.",
        "Write a function to add two lists using map and lambda function.",
        "Write a function to remove consecutive duplicates of a given list.",
        "Write a function to find the lateral surface area of a cone.",
        "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "Write a python function to find sum of products of all possible subarrays.",
        "Write a python function to toggle bits of the number except the first and the last bit.",
        "Write a function to locate the left insertion point for a specified value in sorted order.",
        "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "Write a function to calculate the geometric sum of n-1.",
        "Write a python function to find the index of smallest triangular number with n digits.",
        "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "Write a python function to check whether all the characters are same or not.",
        "Write a function to caluclate the area of a tetrahedron.",
        "Write a function to rotate a given list by specified number of items to the right direction.",
        "Write a function to check if the given tuple has any none value or not.",
        "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
        "Write a function to find area of a sector.",
        "Write a function to find the longest common subsequence for the given three string sequence.",
        "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
        "Write a function to sort a given list of strings of numbers numerically.",
        "Write a function to add the given tuple to the given list.",
        "Write a function to check if the given array represents min heap or not.",
        "Write a function to find the nth jacobsthal number.",
        "Write a function to find minimum k records from tuple list.",
        "Write a function to find common index elements from three lists.",
        "Write a function to find the second smallest number in a list.",
        "Write a function that matches a string that has an a followed by zero or one 'b'.",
        "Write a function to count the pairs of reverse strings in the given string list.",
        "Write a function to count number of unique lists within a list.",
        "Write a function to check a decimal with a precision of 2.",
        "Write a python function to check whether an array contains only one distinct element or not.",
        "Write a function to caluclate arc length of an angle.",
        "Write a function to check whether the given month number contains 30 days or not.",
        "Write a python function to find the minimum difference between any two elements in a given array.",
        "Write a python function to count numeric values in a given string.",
        "Write a function to find nth polite number.",
        "Write a function to iterate over all pairs of consecutive items in a given list.",
        "Write a python function to count the number of pairs whose sum is equal to ‘sum’.",
        "Write a python function to check for odd parity of a given number.",
        "Write a python function to get the difference between two lists.",
        "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "Write a function to check if the given expression is balanced or not.",
        "Write a function to remove all the words with k length in the given string.",
        "Write a function to find the occurrence and position of the substrings within a string.",
        "Write a function to check if the string is a valid email address or not using regex.",
        "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "Write a python function to find the sum of non-repeated elements in a given array.",
        "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "Write a function to count the number of unique lists within a list.",
        "Write a function to find the combinations of sums with tuples in the given tuple list.",
        "Write a python function to check whether the count of divisors is even or odd.",
        "Write a python function to find the sum of all odd length subarrays.",
        "Write a function to convert rgb color to hsv color.",
        "Write a function to find the product of first even and odd number of a given list.",
        "Write a function to convert tuple string to integer tuple.",
        "Write a function to locate the right insertion point for a specified value in sorted order.",
        "Write a function that matches a string that has an a followed by three 'b'.",
        "Write a function to create a new tuple from the given string and list.",
        "Write a function to calculate the perimeter of a regular polygon.",
        "Write a python function to check whether every even index contains even numbers of a given list.",
        "Write a function to remove the nested record from the given tuple.",
        "Write a python function to count the number of lists in a given number of lists.",
        "Write a python function to find the last position of an element in a sorted array.",
        "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
        "Write function to find the sum of all items in the given dictionary.",
        "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "Write a python function to find the sum of an array.",
        "Write a python function to left rotate the bits of a given number.",
        "Write a function to remove all whitespaces from a string.",
        "Write a python function to count the number of equal numbers from three given integers.",
        "Write a python function to count the number of rotations required to generate a sorted array.",
        "Write a python function to check whether the given number is a perfect square or not.",
        "Write a python function to check whether the product of numbers is even or not.",
        "Write a function to find the list in a list of lists whose sum of elements is the highest.",
        "Write a function to find maximum run of uppercase characters in the given string.",
        "Write a python function to find the first odd number in a given list of numbers.",
        "Write a function to check if the given tuples contain the k or not.",
        "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
        "Write a function to iterate over elements repeating each as many times as its count.",
        "Write a function to check if two lists of tuples are identical or not.",
        "Write a function to abbreviate 'road' as 'rd.' in a given string.",
        "Write a function to find length of the string.",
        "Write a function to find the area of a rombus.",
        "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
        "Write a function to clear the values of the given tuples.",
        "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
        "Write a python function to count lower case letters in a given string.",
        "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
        "Write a function to check whether the given month number contains 28 days or not.",
        "Write a function to merge two dictionaries into a single expression.",
        "Write a function to return true if the password is valid.",
        "Write a function to check if the given string starts with a substring using regex.",
        "Write a python function to remove even numbers from a given list.",
        "Write a python function to access multiple elements of specified index from a given list.",
        "Write a python function to find the type of triangle from the given sides.",
        "Write a function to sum a specific column of a list in a given list of lists.",
        "Write a function to count alphabets,digits and special charactes in a given string.",
        "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
        "Write a function to round up a number to specific digits.",
        "Write a python function to count equal element pairs from the given array.",
        "Write a function to extract the maximum numeric value from a string by using regex.",
        "Write a function to get dictionary keys as a list.",
        "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
        "Write a python function to find the slope of a line.",
        "Write a function to find length of the subarray having maximum sum.",
        "Write a python function to find the cube sum of first n odd natural numbers.",
        "Write a python function to find minimum number swaps required to make two binary strings equal.",
        "Write a function to sort the tuples alphabetically by the first item of each tuple.",
        "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
        "Write a function to count the number of inversions in the given array.",
        "Write a function to find the number which occurs for odd number of times in the given array.",
        "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
        "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
        "Write a python function to count the number of digits in factorial of a given number.",
        "Write a function to find the minimum number of platforms required for a railway/bus station.",
        "Write a python function to copy a list from a singleton tuple.",
        "Write a function to find the area of a trapezium.",
        "Write a python function to find sum of all prime divisors of a given number.",
        "Write a function to check if a triangle of positive area is possible with the given angles.",
        "Write a python function to find sum of inverse of divisors.",
        "Write a python function to remove negative numbers from a list.",
        "Write a python function to find sum of odd factors of a number.",
        "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
        "Write a python function to check for even parity of a given number.",
        "Write a python function to find minimum adjacent swaps required to sort binary array.",
        "Write a function to list out the list of given strings individually using map function.",
        "Write a function to count number of lists in a given list of lists and square the count.",
        "Write a function to generate all sublists of a given list.",
        "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
        "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
        "Write a function to find the occurrences of n most common words in a given text.",
        "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
        "Write a function to find palindromes in a given list of strings using lambda function.",
        "Write a function to print n-times a list using map function.",
        "Write a function to check whether the given month name contains 31 days or not.",
        "Write a python function to add a minimum number such that the sum of array becomes even.",
        "Write a python function to find the length of the last word in a given string.",
        "Write a function to remove sublists from a given list of lists, which are outside a given range.",
        "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
        "Write a python function to check whether the given strings are rotations of each other or not.",
        "Write a function to check if a nested list is a subset of another nested list.",
        "Write a function to solve the fibonacci sequence using recursion.",
        "Write a python function to check if the string is a concatenation of another string.",
        "Write a function to find the minimum difference in the tuple pairs of given tuples.",
        "Write a python function to find lcm of two positive integers.",
        "Write a python function to sort the given string.",
        "Write a function to check if the given tuple contains only k elements.",
        "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
        "Write a python function to find number of solutions in quadratic equation.",
        "Write a function to find the sum of first even and odd number of a given list.",
        "Write a function to caluclate perimeter of a parallelogram.",
        "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
        "Write a python function to check whether all the bits are within a given range or not.",
        "Write a python function to check whether the two given strings are isomorphic to each other or not.",
        "Write a function to add all the numbers in a list and divide it with the length of the list.",
        "Write a python function to check whether the given number is odd or not using bitwise operator.",
        "Write a function to substract the elements of the given nested tuples.",
        "Write a function to reverse each list in a given list of lists.",
        "Write a python function to find the index of an extra element present in one sorted array.",
        "Write a python function to check whether the given two numbers have same number of digits or not.",
        "Write a function to remove multiple spaces in a string.",
        "Write a python function to get the last element of each sublist.",
        "Write a function to convert the given string of float type into tuple.",
        "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
        "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
        "Write a python function to check whether the word is present in a given sentence or not.",
        "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
        "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
        "Write a function where a string will start with a specific number.",
        "Write a function to find the smallest multiple of the first n numbers.",
        "Write a function to combine two dictionaries by adding values for common keys.",
        "Write a python function to count the total unset bits from 1 to n.",
        "Write a function to return true if the given number is even else return false.",
        "Write a python function to find the sum of squares of binomial co-efficients.",
        "Write a function to extract year, month and date from a url by using regex.",
        "Write a function to print the first n lucky numbers.",
        "Write a function to find the fixed point in the given array.",
        "Write a function to find the previous palindrome of a specified number.",
        "Write a function to validate a gregorian date.",
        "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
        "Write a function to find ln, m lobb number.",
        "Write a function to check for a number at the end of a string.",
        "Write a python function to check whether the given string is made up of two alternating characters or not.",
        "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
        "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
        "Write a function to find the sequences of one upper case letter followed by lower case letters.",
        "Write a function to count coin change.",
        "Write a python function to multiply all items in the list.",
        "Write a function to remove all tuples with all none values in the given tuple list.",
        "Write a function to perform chunking of tuples each of size n.",
        "Write a function to find a pair with the highest product from a given array of integers.",
        "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
        "Write a function to find maximum of two numbers.",
        "Write a python function to calculate the product of all the numbers of a given tuple.",
        "Write a function to find n-th rencontres number.",
        "Write a function to calculate the height of the given binary tree.",
        "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "Write a function to count repeated items of a tuple.",
        "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
        "Write a function to calculate the sum of series 1³+2³+3³+….+n³.",
        "Write a function to remove duplicate words from a given list of strings.",
        "Write a function to convert camel case string to snake case string by using regex.",
        "Write a function to find the nth delannoy number.",
        "Write a function to calculate the sum of series 1²+2²+3²+….+n².",
        "Write a function to re-arrange the given tuples based on the given ordered list.",
        "Write a function to count the most common character in a given string.",
        "Write a function to find three closest elements from three sorted arrays.",
        "Write a function to sort a list of dictionaries using lambda function.",
        "Write a function to sort the given array by using heap sort.",
        "Write a function to count the elements in a list until an element is a tuple.",
        "Write a function to check if any list element is present in the given list.",
        "Write a function to combine two given sorted lists using heapq module.",
        "Write a function to separate and print the numbers and their position of a given string.",
        "Write a function to convert the given tuples into set.",
        "Write a function to find the most common elements and their counts of a specified text.",
        "Write a python function to find the length of the shortest word.",
        "Write a function to get an item of a tuple.",
        "Write a function to sort the given tuple list basis the total digits in tuple.",
        "Write a function to display sign of the chinese zodiac for given year.",
        "Write a function to find the maximum of similar indices in two lists of tuples.",
        "Write a function to compute the value of ncr mod p.",
        "Write a python function to find the minimun number of subsets with distinct elements.",
        "Write a function that gives profit amount if the given amount has profit else return none.",
        "Write a function to find out, if the given number is abundant.",
        "Write a function to split the given string at uppercase letters by using regex.",
        "Write a python function to get the position of rightmost set bit.",
        "Write a function to convert an integer into a roman numeral.",
        "Write a python function to find the average of a list.",
        "Write a function to solve tiling problem.",
        "Write a function to convert a roman numeral to an integer.",
        "Write a python function to find the sum of all even natural numbers within the range l and r.",
        "Write a function to calculate the discriminant value.",
        "Write a python function to check whether the length of the word is even or not.",
        "Write a function to convert camel case string to snake case string.",
        "Write a function to remove an empty tuple from a list of tuples.",
        "Write a python function to accept the strings which contains all vowels.",
        "Write a python function to find maximum possible value for the given periodic function.",
        "Write a function to join the tuples if they have similar initial elements.",
        "Write a function to find minimum of two numbers.",
        "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
        "Write a function to concatenate the given two tuples to a nested tuple.",
        "Write a python function to left rotate the string.",
        "Write a function to find the minimum total path sum in the given triangle."
    ],
    "code": [
        "def max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i].a > arr[j].b and mcl[i] < mcl[j] + 1:\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if max < mcl[i]:\n            max = mcl[i]\n    return max\n",
        "def first_repeated_char(str1):\n    for index, c in enumerate(str1):\n        if str1[:index + 1].count(c) > 1:\n            return c\n    return \"None\"\n",
        "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile index != len(ludics):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile remove_index < len(ludics):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
        "def reverse_words(s):\n    return ' '.join(reversed(s.split()))\n",
        "def prime_num(num):\n    if num >= 1:\n        for i in range(2, num // 2):\n            if (num % i) == 0:\n                return False\n            else:\n                return True\n    else:\n        return False\n",
        "import math\n\n\ndef radian_degree(degree):\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "import re\n\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return match.re.pattern, s, e\n",
        "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0] \n",
        "def floor_min(A, B, N):\n    x = max(B - 1, N)\n    return (A * x) // B\n",
        "def remove_kth_element(list1, L):\n    return list1[:L - 1] + list1[L:]\n",
        "def max_of_nth(test_list, N):\n    res = max([sub[N] for sub in test_list])\n    return res\n",
        "def merge(lst):\n    return [list(ele) for ele in list(zip(*lst))] \n",
        "def maximum_value(test_list):\n    res = [(key, max(lst)) for key, lst in test_list]\n    return res\n",
        "def cumulative_sum(test_list):\n    res = sum(map(sum, test_list))\n    return res\n",
        "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n",
        "def tuple_modulo(test_tup1, test_tup2):\n    res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n",
        "def min_jumps(a, b, d):\n    temp = a\n    a = min(a, b)\n    b = max(temp, b)\n    if d >= b:\n        return (d + b - 1) / b\n    if d == 0:\n        return 0\n    if d == a:\n        return 1\n    else:\n        return 2\n",
        "def div_list(nums1, nums2):\n    result = map(lambda x, y: x / y, nums1, nums2)\n    return list(result)\n",
        "def move_num(test_str):\n    res = ''\n    dig = ''\n    for ele in test_str:\n        if ele.isdigit():\n            dig += ele\n        else:\n            res += ele\n    res += dig\n    return res\n",
        "def largest_subset(a, n):\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1\n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\n",
        "def increment_numerics(test_list, K):\n    res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n    return res\n",
        "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n",
        "def nth_nums(nums, n):\n    nth_nums = list(map(lambda x: x ** n, nums))\n    return nth_nums\n",
        "def is_upper(string):\n    return string.upper()\n",
        "def swap_list(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList \n",
        "def triangle_area(r):\n    if r < 0:\n        return -1\n    return r * r\n",
        "def find_first_missing(array, start, end):\n    if start > end:\n        return end + 1\n    if start != array[start]:\n        return start\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return find_first_missing(array, mid + 1, end)\n    return find_first_missing(array, start, mid)\n",
        "MAX = 1000\n\n\ndef replace_spaces(string):\n    string = string.strip()\n    i = len(string)\n    space_count = string.count(' ')\n    new_length = i + space_count * 2\n    if new_length > MAX:\n        return -1\n    index = new_length - 1\n    string = list(string)\n    for f in range(i - 2, new_length - 2):\n        string.append('0')\n    for j in range(i - 1, 0, -1):\n        if string[j] == ' ':\n            string[index] = '0'\n            string[index - 1] = '2'\n            string[index - 2] = '%'\n            index = index - 3\n        else:\n            string[index] = string[j]\n            index -= 1\n    return ''.join(string)\n",
        "def split(list):\n    ev_li = []\n    for i in list:\n        if i % 2 == 0:\n            ev_li.append(i)\n    return ev_li\n",
        "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if not ele:\n        yield sub\n    else:\n        yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                    for idx in adjac(ele[1:], sub + [j])]\n\n\ndef get_coordinates(test_tup):\n    res = list(adjac(test_tup))\n    return res\n",
        "def replace_spaces(text):\n    text = text.replace(\" \", \"_\")\n    return text\n",
        "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    x.extend(a)\n    return x\n",
        "def pair_or_sum(arr, n):\n    ans = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n",
        "def even_power_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j)\n    return sum\n",
        "import heapq as hq\n\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "def check_solution(a, b, c):\n    if a == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n",
        "import math\n\n\ndef wind_chill(v, t):\n    windchill = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return int(round(windchill, 0))\n",
        "def sample_nam(sample_names):\n    sample_names = list(filter(lambda el: el[0].isupper() and el[1:].islower(), sample_names))\n    return len(''.join(sample_names))\n",
        "import re\n\n\ndef remove_parenthesis(items):\n    for item in items:\n        return re.sub(r\" ?\\([^)]+\\)\", \"\", item)\n",
        "def is_nonagonal(n):\n\treturn int(n * (7 * n - 5) / 2) \n",
        "def remove_similar_row(test_list):\n    res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\n    return res\n",
        "import re\n\n\ndef text_match_wordz_middle(text):\n    patterns = '\\Bz\\B'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def reverse_array_upto_k(input, k):\n    return input[k - 1::-1] + input[k:]\n",
        "def get_product(val):\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\n\n\ndef find_k_product(test_list, K):\n    res = get_product([sub[K] for sub in test_list])\n    return res\n",
        "def no_of_cubes(N, K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No\n",
        "import re\n\n\ndef split_upperstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)\n",
        "from itertools import zip_longest, chain\n\n\ndef exchange_elements(lst):\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n",
        "def sum_range_list(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1, 1):\n        sum_range += nums[i]\n    return sum_range   \n",
        "def are_equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0, n - 1):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n",
        "def check_subset(test_tup1, test_tup2):\n    res = set(test_tup2).issubset(test_tup1)\n    return res\n",
        "def matrix_to_list(test_list):\n    temp = [ele for sub in test_list for ele in sub]\n    res = list(zip(*temp))\n    return str(res)\n",
        "from collections import defaultdict\n\n\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n",
        "def rectangle_perimeter(l, b):\n    perimeter = 2 * (l + b)\n    return perimeter\n",
        "def fifth_power_sum(n):\n    sm = 0\n    for i in range(1, n + 1):\n        sm = sm + (i * i * i * i * i)\n    return sm\n",
        "def find_min_sum(a, b, n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n",
        "import math\n\n\ndef first_digit(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n        while fact % 10 == 0:\n            fact = int(fact / 10)\n    while fact >= 10:\n        fact = int(fact / 10)\n    return math.floor(fact)\n",
        "def max_occurrences(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n",
        "def repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated \n",
        "def find_points(l1, r1, l2, r2):\n    x = min(l1, l2) if (l1 != l2) else -1\n    y = max(r1, r2) if (r1 != r2) else -1\n    return x, y\n",
        "def max_sum_of_three_consecutive(arr, n):\n\tsum = [0 for k in range(n)]\n\tif n >= 1:\n\t\tsum[0] = arr[0]\n\tif n >= 2:\n\t\tsum[1] = arr[0] + arr[1]\n\tif n > 2:\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n\tfor i in range(3, n):\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n\treturn sum[n-1]\n",
        "def sorted_dict(dict1):\n    sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n    return sorted_dict\n",
        "import sys\n\n\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if k % x == y:\n            ans = max(ans, k)\n    return ans if (0 <= ans <= n) else -1\n",
        "def average_even(n):\n    if n % 2 != 0:\n        return \"Invalid Input\"\n    sm = 0\n    count = 0\n    while n >= 2:\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm // count\n",
        "def move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return x\n",
        "def count_char(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count = count + 1\n    return count\n",
        "def check_vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return len(final)\n\n\n",
        "import re\n\n\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n",
        "import re\n\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n\n\ndef check_ip(Ip):\n\tif re.search(regex, Ip):\n\t\treturn \"Valid IP address\"\n\telse:\n\t\treturn \"Invalid IP address\"\n",
        "def decreasing_trend(nums):\n    if sorted(nums) == nums:\n        return True\n    else:\n        return False\n",
        "import math\n\n\ndef get_pos_of_right_most_set_bit(n):\n    return int(math.log2(n & -n) + 1)\n\n\ndef set_right_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    pos = get_pos_of_right_most_set_bit(~n)\n    return (1 << (pos - 1)) | n\n",
        "def max_of_three(num1, num2, num3):\n    if (num1 >= num2) and (num1 >= num3):\n        lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n        lnum = num2\n    else:\n        lnum = num3\n    return lnum\n",
        "def convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return res\n",
        "from collections import OrderedDict\n\n\ndef remove_duplicate(string):\n    result = ' '.join(OrderedDict((w, w) for w in string.split()).keys())\n    return result\n",
        "def sum_nums(x, y, m, n):\n    sum_nums = x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n",
        "import re\n\n\ndef remove_extra_char(text1):\n    pattern = re.compile('[\\W_]+')\n    return pattern.sub('', text1)\n",
        "def validity_triangle(a, b, c):\n    total = a + b + c\n    if total == 180:\n        return True\n    else:\n        return False\n",
        "def remove_spaces(str1):\n    str1 = str1.replace(' ', '')\n    return str1\n",
        "def access_key(ditionary, key):\n    return list(ditionary)[key]\n",
        "def increasing_trend(nums):\n    if sorted(nums) == nums:\n        return True\n    else:\n        return False\n",
        "def smallest_divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n",
        "def mul_list(nums1, nums2):\n    result = map(lambda x, y: x * y, nums1, nums2)\n    return list(result)\n",
        "def sum_square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n",
        "def count_char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == x:\n            count += 1\n    n = 10\n    repetitions = n // len(str)\n    count = count * repetitions\n    l = n % len(str)\n    for i in range(l):\n        if str[i] == x:\n            count += 1\n    return count  \n",
        "def sum_of_primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range(2, n + 1):\n        if prime[i]:\n            sum += i\n    return sum\n",
        "from collections import defaultdict\n\n\ndef freq_element(test_tup):\n    res = defaultdict(int)\n    for ele in test_tup:\n        res[ele] += 1\n    return str(dict(res))\n",
        "def recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high % low)\n",
        "def len_complex(a, b):\n    cn = complex(a, b)\n    length = abs(cn)\n    return length\n",
        "def min_jumps(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]\n",
        "def mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n",
        "from itertools import groupby\n\n\ndef group_element(test_list):\n    res = dict()\n    for key, val in groupby(sorted(test_list, key=lambda ele: ele[1]), key=lambda ele: ele[1]):\n        res[key] = [ele[0] for ele in val]\n    return res\n",
        "def last_two_digits(N):\n    if N >= 10:\n        return\n    fac = 1\n    for i in range(1, N + 1):\n        fac = (fac * i) % 100\n    return fac\n",
        "import re\n\n\ndef remove_multiple_spaces(text1):\n    return re.sub(' +', ' ', text1)\n",
        "def extract_unique(test_dict):\n    res = list(sorted({ele for val in test_dict.values() for ele in val}))\n    return res\n",
        "def check_greater(test_tup1, test_tup2):\n    res = all(x < y for x, y in zip(test_tup1, test_tup2))\n    return res\n",
        "def zip_list(list1, list2):\n    result = list(map(list.__add__, list1, list2))\n    return result\n",
        "def count_even(array_nums):\n    count_even = len(list(filter(lambda x: (x % 2 == 0), array_nums)))\n    return count_even\n",
        "def sort_dict_item(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: ele[1] * ele[0])}\n    return res\n",
        "def min_swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return \"Not Possible\"\n",
        "def count_range_in_list(li, min, max):\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr\n",
        "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1\n",
        "def find_ind(key, i, n, k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1\n    while start < end:\n        mid = int(start + (end - start) / 2)\n        if arr[mid] - key <= k:\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\n\n\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i, n, k, arr)\n        if j != -1:\n            ans = min(ans, n - (j - i + 1))\n    return ans\n",
        "def is_key_present(d, x):\n    if x in d:\n        return True\n    else:\n        return False\n",
        "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n",
        "def sort_sublists(list1):\n    list1.sort()\n    list1.sort(key=len)\n    return list1\n",
        "def is_subset(arr1, m, arr2, n):\n\thashset = set()\n\tfor i in range(0, m):\n\t\thashset.add(arr1[i])\n\tfor i in range(0, n):\n\t\tif arr2[i] in hashset:\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn False\n\treturn True\t\t\n",
        "def count_set_bits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += (n % powerOf2)\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n",
        "def convert(string):\n    li = list(string.split(\" \"))\n    return li \n",
        "from collections import defaultdict\n\n\ndef get_unique(test_list):\n    res = defaultdict(list)\n    for sub in test_list:\n        res[sub[1]].append(sub[0])\n    res = dict(res)\n    res_dict = dict()\n    for key in res:\n        res_dict[key] = len(list(set(res[key])))\n    return str(res_dict)\n",
        "def front_and_rear(test_tup):\n    res = (test_tup[0], test_tup[-1])\n    return res\n",
        "def product_equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1\n    prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n",
        "import itertools\n\n\ndef remove_duplicate(list1):\n    list.sort(list1)\n    remove_duplicate = list(list1 for list1, _ in itertools.groupby(list1))\n    return remove_duplicate\n",
        "def check_valid(test_tup):\n    res = not any(map(lambda ele: not ele, test_tup))\n    return res\n",
        "def count_fac(n):\n    m = n\n    count = 0\n    i = 2\n    while (i * i) <= m:\n        total = 0\n        while n % i == 0:\n            n /= i\n            total += 1\n        temp = 0\n        j = 1\n        while (temp + j) <= total:\n            temp += j\n            count += 1\n            j += 1\n        i += 1\n    if n != 1:\n        count += 1\n    return count \n",
        "def str_to_tuple(test_str):\n    res = tuple(map(int, test_str.split(', ')))\n    return res\n",
        "def rombus_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n",
        "import math\n\n\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean) ** 2\n    sd = math.sqrt(sd / float(n - 1))\n    return sd\n\n\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n",
        "def alternate_elements(list1):\n    result = []\n    for item in list1[::2]:\n        result.append(item)\n    return result\n",
        "import re\n\n\ndef text_match(text):\n    patterns = 'ab*?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def add_dict_to_tuple(test_tup, test_dict):\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n",
        "M = 100\n\n\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n",
        "def filter_data(students, h, w):\n    result = {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n    return result\n",
        "from operator import eq\n\n\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n",
        "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n",
        "import re\n\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n",
        "def multiply_elements(test_tup):\n    res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n",
        "import re\n\n\ndef remove_char(S):\n    result = re.sub('[\\W_]+', '', S)\n    return result\n",
        "def sum_list(lst1, lst2):\n    res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return res_list\n",
        "def add_list(nums1, nums2):\n    result = map(lambda x, y: x + y, nums1, nums2)\n    return list(result)\n",
        "from itertools import groupby\n\n\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n",
        "import math\n\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    LSA = math.pi * r * l\n    return LSA\n",
        "import re\n\n\ndef replace_specialchar(text):\n    return re.sub(\"[ ,.]\", \":\", text)\n",
        "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n",
        "def sum_of_subarray_prod(arr, n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while i >= 0:\n        incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return ans\n",
        "def set_middle_bits(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return (n >> 1) ^ 1\n\n\ndef toggle_middle_bits(n):\n    if n == 1:\n        return 1\n    return n ^ set_middle_bits(n)\n",
        "import bisect\n\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\n\ndef check_str(string):\n    if re.search(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
        "def geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)",
        "import math\n\n\ndef find_index(n):\n    x = math.sqrt(2 * math.pow(10, (n - 1)))\n    return round(x)\n",
        "def tuple_to_dict(test_tup):\n    res = dict(test_tup[idx: idx + 2] for idx in range(0, len(test_tup), 2))\n    return res\n",
        "def all_characters_same(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True\n",
        "import math\n\n\ndef area_tetrahedron(side):\n    area = math.sqrt(3) * (side * side)\n    return area\n",
        "def rotate_right(list1, m, n):\n    result = list1[-m:] + list1[:-n]\n    return result\n",
        "def check_none(test_tup):\n    res = any(map(lambda ele: ele is None, test_tup))\n    return res\n",
        "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum + 1) if not any(map(lambda x: int(x) == 0 or n % int(x) != 0, str(n)))]\n",
        "def sector_area(r, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    sectorarea = (pi * r ** 2) * (a / 360)\n    return sectorarea\n",
        "def lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and\n                      X[i - 1] == Z[k - 1]):\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i - 1][j][k],\n                                         L[i][j - 1][k]),\n                                     L[i][j][k - 1])\n    return L[m][n][o]\n",
        "import re\n\n\ndef capital_words_spaces(str1):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
        "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n",
        "def add_tuple(test_list, test_tup):\n    test_list += test_tup\n    return test_list\n",
        "def check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child\n",
        "def jacobsthal_num(n):\n\tdp = [0] * (n + 1)\n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1):\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]\n\treturn dp[n]\n",
        "def min_k(test_list, K):\n    res = sorted(test_list, key=lambda x: x[1])[:K]\n    return res\n",
        "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\n",
        "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return\n    if (len(numbers) == 2) and (numbers[0] == numbers[1]):\n        return\n    dup_items = set()\n    uniq_items = []\n    for x in numbers:\n        if x not in dup_items:\n            uniq_items.append(x)\n            dup_items.add(x)\n    uniq_items.sort()\n    return uniq_items[1]\n",
        "import re\n\n\ndef text_match_zero_one(text):\n    patterns = 'ab?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def count_reverse_pairs(test_list):\n    res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(test_list))\n               if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n    return str(res)\n",
        "def unique_sublists(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n",
        "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n",
        "def unique_element(arr, n):\n    s = set(arr)\n    if len(s) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "def arc_length(d, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    arclength = (pi * d) * (a / 360)\n    return arclength\n",
        "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    diff = 10 ** 20\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\n",
        "def number_ctr(str):\n    number_ctr = 0\n    for i in range(len(str)):\n        if '0' <= str[i] <= '9':\n            number_ctr += 1\n    return number_ctr\n",
        "import math\n\n\ndef is_polite(n):\n    n = n + 1\n    return int(n + (math.log((n + math.log(n, 2)), 2)))\n",
        "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\n",
        "def get_pairs_count(arr, n, sum):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "def check_odd_parity(x):\n    parity = 0\n    while x != 0:\n        x = x & (x - 1)\n        parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False\n",
        "def diff(li1, li2):\n    return list(list(set(li1) - set(li2)) + list(set(li2) - set(li1)))\n",
        "def odd_num_sum(n):\n    j = 0\n    sm = 0\n    for i in range(1, n + 1):\n        j = (2 * i - 1)\n        sm = sm + (j * j * j * j)\n    return sm\n",
        "from collections import deque\n\n\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n",
        "def remove_length(test_str, K):\n    temp = test_str.split()\n    res = [ele for ele in temp if len(ele) != K]\n    res = ' '.join(res)\n    return res\n",
        "import re\n\n\ndef occurance_substring(text, pattern):\n    for match in re.finditer(pattern, text):\n        s = match.start()\n        e = match.end()\n        return text[s:e], s, e\n",
        "import re\n\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\n\ndef check_email(email):\n    if re.search(regex, email):\n        return \"Valid Email\"\n    else:\n        return \"Invalid Email\"\n",
        "def odd_position(nums):\n    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))\n",
        "def count_vowels(test_str):\n    res = 0\n    vow_list = ['a', 'e', 'i', 'o', 'u']\n    for idx in range(1, len(test_str) - 1):\n        if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n            res += 1\n    if test_str[0] not in vow_list and test_str[1] in vow_list:\n        res += 1\n    if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n        res += 1\n    return res\n",
        "def find_sum(arr, n):\n    arr.sort()\n    sum = arr[0]\n    for i in range(0, n - 1):\n        if arr[i] != arr[i + 1]:\n            sum = sum + arr[i + 1]\n    return sum\n",
        "from itertools import groupby\n\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n",
        "def unique_sublists(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n",
        "from itertools import combinations\n\n\ndef find_combinations(test_list):\n    res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n    return res\n",
        "import math\n\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 2):\n        if n % i == 0:\n            if n // i == i:\n                count = count + 1\n            else:\n                count = count + 2\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "def odd_length_sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) * (l - i) + 1) // 2) * arr[i])\n    return Sum\n",
        "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even * first_odd\n",
        "def tuple_str_int(test_str):\n    res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n    return res\n",
        "import bisect\n\n\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "import re\n\n\ndef text_match_three(text):\n    patterns = 'ab{3}?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def new_tuple(test_list, test_str):\n    res = tuple(test_list + [test_str])\n    return res\n",
        "def perimeter_polygon(s, l):\n    perimeter = s * l\n    return perimeter\n",
        "def even_position(nums):\n    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))\n",
        "def remove_nested(test_tup):\n    res = tuple()\n    for count, ele in enumerate(test_tup):\n        if not isinstance(ele, tuple):\n            res = res + (ele,)\n    return res\n",
        "def count_list(input_list):\n    return len(input_list)\n",
        "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n",
        "import re\n\n\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import heapq\n\n\ndef cheap_items(items, n):\n    cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n    return cheap_items\n",
        "def return_sum(dict):\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n",
        "def sum_odd(n):\n    terms = (n + 1) // 2\n    sum1 = terms * terms\n    return sum1\n\n\ndef sum_in_range(l, r):\n    return sum_odd(r) - sum_odd(l - 1)\n",
        "def _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "INT_BITS = 32\n\n\ndef left_Rotate(n, d):\n    return (n << d) | (n >> (INT_BITS - d))\n",
        "import re\n\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
        "def test_three_equal(x, y, z):\n    result = set([x, y, z])\n    if len(result) == 3:\n        return 0\n    else:\n        return 4 - len(result)\n",
        "def count_rotation(arr, n):\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0\n",
        "def is_perfect_square(n):\n    i = 1\n    while i * i <= n:\n        if (n % i == 0) and (n / i == i):\n            return True\n        i = i + 1\n    return False\n",
        "def is_product_even(arr, n):\n    for i in range(0, n):\n        if (arr[i] & 1) == 0:\n            return True\n    return False\n",
        "def max_sum_list(lists):\n    return max(lists, key=sum)\n",
        "def max_run_uppercase(test_str):\n    cnt = 0\n    res = 0\n    for idx in range(0, len(test_str)):\n        if test_str[idx].isupper():\n            cnt += 1\n        else:\n            res = cnt\n            cnt = 0\n    if test_str[len(test_str) - 1].isupper():\n        res = cnt\n    return res\n",
        "def first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 != 0), -1)\n    return first_odd\n",
        "def check_k(test_tup, K):\n    res = False\n    for ele in test_tup:\n        if ele == K:\n            res = True\n            break\n    return res\n",
        "def check_smaller(test_tup1, test_tup2):\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return res\n",
        "from collections import Counter\n\n\ndef count_variable(a, b, c, d):\n    c = Counter(p=a, q=b, r=c, s=d)\n    return list(c.elements())\n",
        "def check_identical(test_list1, test_list2):\n    res = test_list1 == test_list2\n    return res\n",
        "import re\n\n\ndef road_rd(street):\n    return re.sub('Road$', 'Rd.', street)\n",
        "def string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "def rombus_area(p, q):\n    area = (p * q) / 2\n    return area\n",
        "def sort_by_dnf(arr, n):\n    low = 0\n    mid = 0\n    high = n - 1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low = low + 1\n            mid = mid + 1\n        elif arr[mid] == 1:\n            mid = mid + 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high = high - 1\n    return arr\n",
        "def clear_tuple(test_tup):\n    temp = list(test_tup)\n    temp.clear()\n    test_tup = tuple(temp)\n    return test_tup\n",
        "def div_of_nums(nums, m, n):\n    result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n    return result\n",
        "def lower_ctr(str):\n    lower_ctr = 0\n    for i in range(len(str)):\n        if 'a' <= str[i] <= 'z':\n            lower_ctr += 1\n    return lower_ctr\n",
        "def count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists) - 1):\n        if lists[i] == lists[i + 1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i + 1])\n    return element, frequency\n",
        "def check_monthnum_number(monthnum1):\n    if monthnum1 == 2:\n        return True\n    else:\n        return False\n",
        "import collections as ct\n\n\ndef merge_dictionaries(dict1, dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n",
        "import re\n\n\ndef pass_validity(p):\n    x = True\n    while x:\n        if len(p) < 6 or len(p) > 12:\n            break\n        elif not re.search(\"[a-z]\", p):\n            break\n        elif not re.search(\"[0-9]\", p):\n            break\n        elif not re.search(\"[A-Z]\", p):\n            break\n        elif not re.search(\"[$#@]\", p):\n            break\n        elif re.search(\"\\s\", p):\n            break\n        else:\n            return True\n    if x:\n        return False\n",
        "import re\n\n\ndef check_substring(string, sample):\n    if sample in string:\n        y = \"\\A\" + sample\n        x = re.search(y, string)\n        if x:\n            return \"string starts with the given substring\"\n        else:\n            return \"string doesnt start with the given substring\"\n    else:\n        return \"entered string isnt a substring\"\n",
        "def remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "def access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n",
        "def check_type_of_triangle(a, b, c):\n    sqa = pow(a, 2)\n    sqb = pow(b, 2)\n    sqc = pow(c, 2)\n    if sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb:\n        return \"Right-angled Triangle\"\n    elif sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb:\n        return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"\n",
        "def sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result\n",
        "def count_alpha_dig_spl(string):\n    alphabets = digits = special = 0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            alphabets = alphabets + 1\n        elif string[i].isdigit():\n            digits = digits + 1\n        else:\n            special = special + 1\n    return alphabets, digits, special\n",
        "from collections import Counter\n\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return key\n",
        "import math\n\n\ndef round_up(a, digits):\n    n = 10 ** -digits\n    return round(math.ceil(a / n) * n, digits)\n",
        "def count_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt\n",
        "import re\n\n\ndef extract_max(input):\n    numbers = re.findall('\\d+', input)\n    numbers = map(int, numbers)\n    return max(numbers)\n",
        "def get_key(dict):\n    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n",
        "def generate_matrix(n):\n    if n <= 0:\n        return []\n    matrix = [row[:] for row in [[0] * n] * n]\n    row_st = 0\n    row_ed = n - 1\n    col_st = 0\n    col_ed = n - 1\n    current = 1\n    while True:\n        if current > n * n:\n            break\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = current\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = current\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = current\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = current\n            current += 1\n        col_st += 1\n    return matrix\n",
        "def slope(x1, y1, x2, y2):\n    return float(y2 - y1) / (x2 - x1)\n",
        "from sys import maxsize\n\n\ndef max_sub_array_sum(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return end - start + 1\n",
        "def cube_sum(n):\n    sum = 0\n    for i in range(0, n):\n        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1)\n    return sum\n",
        "def min_swaps(s1, s2):\n    c0 = 0\n    c1 = 0\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1':\n            c0 += 1\n        elif s1[i] == '1' and s2[i] == '0':\n            c1 += 1\n    result = c0 // 2 + c1 // 2\n    if c0 % 2 == 0 and c1 % 2 == 0:\n        return result\n    elif (c0 + c1) % 2 == 0:\n        return result + 2\n    else:\n        return -1\n",
        "def sort_tuple(tup):\n\tn = len(tup)\n\tfor i in range(n):\n\t\tfor j in range(n-i-1):\n\t\t\tif tup[j][0] > tup[j + 1][0]:\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j]\n\treturn tup\n",
        "def check_solution(a, b, c):\n    if b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "def get_inv_count(arr, n):\n\tinv_count = 0\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tinv_count += 1\n\treturn inv_count \n",
        "def get_odd_occurence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n",
        "import heapq\n\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n",
        "def get_number(n, k):\n    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n",
        "import math\n\n\ndef find_digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = (n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0)\n    return math.floor(x) + 1\n",
        "def find_platform(arr, dep, n): \n\n    arr.sort() \n\n    dep.sort() \n\n    plat_needed = 1\n\n    result = 1\n\n    i = 1\n\n    j = 0\n\n    while (i < n and j < n): \n\n        if (arr[i] <= dep[j]):           \n\n            plat_needed+= 1\n\n            i+= 1\n\n        elif (arr[i] > dep[j]):           \n\n            plat_needed-= 1\n\n            j+= 1\n\n        if (plat_needed > result):  \n\n            result = plat_needed           \n\n    return result\n",
        "def lcopy(xs):\n    return xs[:]\n",
        "def area_trapezium(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    return area\n",
        "def sum(N):\n    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if SumOfPrimeDivisors[i] == 0:\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n",
        "def is_triangleexists(a, b, c):\n    if a != 0 and b != 0 and c != 0 and (a + b + c) == 180:\n        if (a + b) >= c or (b + c) >= a or (a + c) >= b:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "def Sum_of_Inverse_Divisors(N, Sum):\n    ans = float(Sum) * 1.0 / float(N)\n    return round(ans, 2)\n",
        "def remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n            num_list.remove(item)\n    return num_list\n",
        "import math\n\n\ndef sum_of_odd_factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n",
        "import heapq as hq\n\n\ndef raw_heap(rawheap):\n    hq.heapify(rawheap)\n    return rawheap\n",
        "def check_even_parity(x):\n    parity = 0\n    while x != 0:\n        x = x & (x - 1)\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\n",
        "def find_min_swaps(arr, n):\n    noOfZeroes = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 - arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        noOfZeroes[i] = noOfZeroes[i + 1]\n        if arr[i] == 0:\n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0, n):\n        if arr[i] == 1:\n            count = count + noOfZeroes[i]\n    return count\n",
        "def listify_list(list1):\n    result = list(map(list, list1))\n    return result\n",
        "def count_list(input_list):\n    return (len(input_list))**2\n",
        "from itertools import combinations\n\n\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list) + 1):\n        temp = [list(x) for x in combinations(my_list, i)]\n        if len(temp) > 0:\n            subs.extend(temp)\n    return subs\n",
        "import re\n\nregex = '[a-zA-z0-9]$'\n\n\ndef check_alphanumeric(string):\n    if re.search(regex, string):\n        return \"Accept\"\n    else:\n        return \"Discard\"\n",
        "from collections import Counter\n\n\ndef anagram_lambda(texts, str):\n    result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n    return result\n",
        "from collections import Counter\n\nimport re\n\n\ndef n_common_words(text, n):\n    words = re.findall('\\w+', text)\n    n_common_words = Counter(words).most_common(n)\n    return list(n_common_words)\n",
        "def find_longest_conseq_subseq(arr, n):\n\tans = 0\n\tcount = 0\n\tarr.sort()\n\tv = [arr[0]]\n\tfor i in range(1, n):\n\t\tif arr[i] != arr[i - 1]:\n\t\t\tv.append(arr[i])\n\tfor i in range(len(v)):\n\t\tif i > 0 and v[i] == v[i - 1] + 1:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 1\n\t\tans = max(ans, count)\n\treturn ans \n",
        "def palindrome_lambda(texts):\n    result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n    return result\n",
        "def ntimes_list(nums, n):\n    result = map(lambda x: n * x, nums)\n    return list(result)\n",
        "def check_monthnumb(monthname2):\n    if monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" \\\n            or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n        return True\n    else:\n        return False\n",
        "def min_num(arr, n):\n    odd = 0\n    for i in range(n):\n        if arr[i] % 2:\n            odd += 1\n    if odd % 2:\n        return 1\n    return 2\n",
        "def length_of_last_word(a):\n    lo = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            lo = 0\n        else:\n            lo += 1\n    return lo\n",
        "def remove_list_range(list1, leftrange, rigthrange):\n    result = [i for i in list1 if (min(i) >= leftrange and max(i) <= rigthrange)]\n    return result\n",
        "def sum_positivenum(nums):\n    sum_positivenum = list(filter(lambda nums: nums > 0, nums))\n    return sum(sum_positivenum)\n",
        "def are_rotations(string1, string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if temp.count(string2) > 0:\n        return True\n    else:\n        return False\n",
        "def check_subset(list1, list2):\n    return all(map(list1.__contains__, list2))\n",
        "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + (fibonacci(n - 2))\n",
        "def check_concat(str1, str2):\n    N = len(str1)\n    M = len(str2)\n    if N % M != 0:\n        return False\n    for i in range(N):\n        if str1[i] != str2[i % M]:\n            return False\n    return True\n",
        "def min_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = min(temp)\n    return res\n",
        "def lcm(x, y):\n    if x > y:\n        z = x\n    else:\n        z = y\n    while True:\n        if (z % x == 0) and (z % y == 0):\n            lcm = z\n            break\n        z += 1\n    return lcm\n",
        "def sort_string(str):\n    str = ''.join(sorted(str))\n    return str\n",
        "def check_tuples(test_tuple, K):\n    res = all(ele in K for ele in test_tuple)\n    return res\n",
        "import re\n\n\ndef text_match(text):\n    patterns = 'a.*?b$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def check_solution(a, b, c):\n    if ((b * b) - (4 * a * c)) > 0:\n        return \"2 solutions\"\n    elif ((b * b) - (4 * a * c)) == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n",
        "def sum_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even + first_odd\n",
        "def parallelogram_perimeter(b, h):\n    perimeter = 2 * (b * h)\n    return perimeter\n",
        "def div_of_nums(nums, m, n):\n    result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n    return result\n",
        "def all_bits_set_in_the_given_range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if num == new_num:\n        return True\n    return False\n",
        "def is_isomorphic(str1, str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n",
        "def sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers) \n",
        "def is_odd(n):\n    if n ^ 1 == n - 1:\n        return True\n    else:\n        return False\n",
        "def substract_elements(test_tup1, test_tup2):\n    res = tuple(tuple(a - b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res\n",
        "def reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse=True)\n    return lists\n",
        "def find_extra(arr1, arr2, n):\n    for i in range(0, n):\n        if arr1[i] != arr2[i]:\n            return i\n    return n\n",
        "def same_length(A, B):\n    while A > 0 and B > 0:\n        A = A / 10\n        B = B / 10\n    if A == 0 and B == 0:\n        return True\n    return False\n",
        "import re\n\n\ndef remove_spaces(text):\n    return re.sub(' +', ' ', text)\n",
        "def extract(lst):\n    return [item[-1] for item in lst] \n",
        "def float_to_tuple(test_str):\n    res = tuple(map(float, test_str.split(', ')))\n    return res\n",
        "def max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n",
        "def last(n):\n    return n[-1]\n\n\ndef sort_list_last(tuples):\n    return sorted(tuples, key=last)\n",
        "def is_word_present(sentence, word):\n    s = sentence.split(\" \")\n    for i in s:\n        if i == word:\n            return True\n    return False\n",
        "from itertools import groupby\n\n\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n",
        "def check(arr, n):\n    g = 0\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] > 0 and g == 1:\n            return False\n        if arr[i] - arr[i] < 0:\n            g = 1\n    return True\n",
        "import re\n\n\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n",
        "def smallest_multiple(n):\n    if n <= 2:\n        return n\n    i = n * 2\n    factors = [number for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if a == factors[-1] and i % a == 0:\n                return i\n",
        "from collections import Counter\n\n\ndef add_dict(d1, d2):\n    add_dict = Counter(d1) + Counter(d2)\n    return add_dict\n",
        "def count_unset_bits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if temp % 2 == 0:\n                cnt += 1\n            temp = temp // 2\n    return cnt\n",
        "def even_num(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "def factorial(start, end):\n    res = 1\n    for i in range(start, end + 1):\n        res *= i\n    return res\n\n\ndef sum_of_square(n):\n    return int(factorial(n + 1, 2 * n) / factorial(1, n))\n",
        "import re\n\n\ndef extract_date(url):\n    return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n",
        "def lucky_num(n):\n    List = range(-1, n * n + 9, 2)\n    i = 2\n    while List[i:]:\n        List = sorted(set(List) - set(List[List[i]::List[i]]))\n        i += 1\n    return List[1:n + 1]\n",
        "def find_fixed_point(arr, n):\n\tfor i in range(n):\n\t\tif arr[i] is i:\n\t\t\treturn i\n\treturn -1\n",
        "def previous_palindrome(num):\n    for x in range(num - 1, 0, -1):\n        if str(x) == str(x)[::-1]:\n            return x\n",
        "import datetime\n\n\ndef check_date(m, d, y):\n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n\n    except ValueError:\n        return False\n",
        "import heapq\n\n\ndef maximum_product(nums):\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n",
        "def binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j])\n    return C[n][k]\n\n\ndef lobb_num(n, m):\n    return ((2 * m + 1) * binomial_coeff(2 * n, m + n)) / (m + n + 1)\n",
        "import re\n\n\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n",
        "def is_two_alter(s):\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    if s[0] == s[1]:\n        return False\n    return True\n",
        "def rearrange_numbs(array_nums):\n    result = sorted(array_nums, key=lambda i: 0 if i == 0 else -1 / i)\n    return result\n",
        "def find_triplet_array(A, arr_size, sum):\n    for i in range(0, arr_size - 2):\n        for j in range(i + 1, arr_size - 1):\n            for k in range(j + 1, arr_size):\n                if A[i] + A[j] + A[k] == sum:\n                    return A[i], A[j], A[k]\n    return False\n",
        "import re\n\n\ndef text_uppercase_lowercase(text):\n    patterns = '[A-Z]+[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "def coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1] \n",
        "def multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n",
        "def remove_tuple(test_list):\n    res = [sub for sub in test_list if not all(ele is None for ele in sub)]\n    return str(res)\n",
        "def chunk_tuples(test_tup, N):\n    res = [test_tup[i: i + N] for i in range(0, len(test_tup), N)]\n    return res\n",
        "def max_product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return None\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n",
        "def super_seq(X, Y, m, n):\n\tif not m:\n\t\treturn n\n\tif not n:\n\t\treturn m\n\tif X[m - 1] == Y[n - 1]:\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))\n",
        "def max_of_two(x, y):\n    if x > y:\n        return x\n    return y\n",
        "def mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n",
        "def binomial_coeffi(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)\n\n\ndef rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if m == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    return binomial_coeffi(n, m) * rencontres_number(n - m, 0)\n",
        "class Node:\n\n    def __init__(self, data):\n        self.data = data\n\n        self.left = None\n\n        self.right = None\n\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1\n",
        "import re\n\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n",
        "def count_tuplex(tuplex, value):\n    count = tuplex.count(value)\n    return count\n",
        "import re\n\n\ndef text_match(text):\n    patterns = 'ab*?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import math\n\n\ndef sum_series(number):\n    total = math.pow((number * (number + 1)) / 2, 2)\n    return total\n",
        "def remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n",
        "import re\n\n\ndef camel_to_snake(text):\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n",
        "def dealnnoy_num(n, m):\n\tif m == 0 or n == 0:\n\t\treturn 1\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n",
        "def series_sum(number):\n    total = (number * (number + 1) * (2 * number + 1)) / 6\n    return total\n",
        "def re_arrange_tuples(test_list, ord_list):\n    temp = dict(test_list)\n    res = [(key, temp[key]) for key in ord_list]\n    return res\n",
        "from collections import Counter\n\n\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key=temp.get)\n    return max_char\n",
        "import sys\n\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]))\n        if maximum - minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i + 1\n        elif B[j] == minimum:\n            j = j + 1\n        else:\n            k = k + 1\n    return A[res_i], B[res_j], C[res_k]\n",
        "def sorted_models(models):\n    sorted_models = sorted(models, key=lambda x: x['color'])\n    return sorted_models\n",
        "def heap_sort(arr):\n    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\n\n\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n",
        "def count_elim(num):\n    count_elim = 0\n    for n in num:\n        if isinstance(n, tuple):\n            break\n        count_elim += 1\n    return count_elim\n",
        "def check_element(test_tup, check_list):\n    res = False\n    for ele in check_list:\n        if ele in test_tup:\n            res = True\n            break\n    return res\n",
        "from heapq import merge\n\n\ndef combine_lists(num1, num2):\n    combine_lists = list(merge(num1, num2))\n    return combine_lists\n",
        "import re\n\n\ndef num_position(text):\n    for m in re.finditer(\"\\d+\", text):\n        return m.start()\n",
        "def tuple_to_set(t):\n    s = set(t)\n    return s\n",
        "from collections import Counter\n\n\ndef most_common_elem(s, a):\n    most_common_elem = Counter(s).most_common(a)\n    return most_common_elem\n",
        "def len_log(list1):\n    min = len(list1[0])\n    for i in list1:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "def get_item(tup1, index):\n    item = tup1[index]\n    return item\n",
        "def count_digs(tup):\n    return sum([len(str(ele)) for ele in tup])\n\n\ndef sort_list(test_list):\n    test_list.sort(key=count_digs)\n    return str(test_list)\n",
        "def chinese_zodiac(year):\n    if (year - 2000) % 12 == 0:\n        sign = 'Dragon'\n    elif (year - 2000) % 12 == 1:\n        sign = 'Snake'\n    elif (year - 2000) % 12 == 2:\n        sign = 'Horse'\n    elif (year - 2000) % 12 == 3:\n        sign = 'sheep'\n    elif (year - 2000) % 12 == 4:\n        sign = 'Monkey'\n    elif (year - 2000) % 12 == 5:\n        sign = 'Rooster'\n    elif (year - 2000) % 12 == 6:\n        sign = 'Dog'\n    elif (year - 2000) % 12 == 7:\n        sign = 'Pig'\n    elif (year - 2000) % 12 == 8:\n        sign = 'Rat'\n    elif (year - 2000) % 12 == 9:\n        sign = 'Ox'\n    elif (year - 2000) % 12 == 10:\n        sign = 'Tiger'\n    else:\n        sign = 'Hare'\n    return sign\n",
        "def max_similar_indices(test_list1, test_list2):\n    res = [(max(x[0], y[0]), max(x[1], y[1])) for x, y in zip(test_list1, test_list2)]\n    return res\n",
        "def ncr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    C = [0 for _ in range(r + 1)]\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n",
        "def subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n):\n        count = 1\n        for j in range(n - 1):\n            if ar[j] == ar[j + 1]:\n                count += 1\n            else:\n                break\n        res = max(res, count)\n    return res\n",
        "def profit_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        amount = actual_cost - sale_amount\n        return amount\n    else:\n        return None\n",
        "def is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n",
        "import re\n\n\ndef split_list(text):\n    return re.findall('[A-Z][^A-Z]*', text)\n",
        "import math\n\n\ndef get_first_set_bit_pos(n):\n    return math.log2(n & -n) + 1\n",
        "def int_to_roman(num):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n",
        "def average(lst):\n    return sum(lst) / len(lst) \n",
        "def get_noofways(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_noofways(n - 1) + get_noofways(n - 2)\n",
        "def roman_to_int(s):\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val\n",
        "def sum_natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\n\n\ndef sum_even(l, r):\n    return sum_natural(int(r / 2)) - sum_natural(int((l - 1) / 2))\n",
        "def discriminant_value(x, y, z):\n    discriminant = (y ** 2) - (4 * x * z)\n    if discriminant > 0:\n        return \"Two solutions\", discriminant\n    elif discriminant == 0:\n        return \"one solution\", discriminant\n    elif discriminant < 0:\n        return \"no real solution\", discriminant\n",
        "def word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word) % 2 == 0:\n            return True\n        else:\n            return False\n",
        "import re\n\n\ndef camel_to_snake(text):\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n",
        "def remove_empty(tuple1):  # L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n    tuple1 = [t for t in tuple1 if t]\n    return tuple1\n",
        "def check(string):\n    if len(set(string).intersection(\"AEIOUaeiou\")) >= 5:\n        return 'accepted'\n    else:\n        return \"not accepted\"\n",
        "def floor_max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B\n",
        "def join_tuples(test_list):\n    res = []\n    for sub in test_list:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    res = list(map(tuple, res))\n    return res\n",
        "def min_of_two(x, y):\n    if x < y:\n        return x\n    return y\n",
        "def maximum_segments(n, a, b, c):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n):\n        if dp[i] != -1:\n            if i + a <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]\n",
        "def concatenate_nested(test_tup1, test_tup2):\n    res = test_tup1 + test_tup2\n    return res\n",
        "def left_rotate(s, d):\n    tmp = s[d:] + s[0: d]\n    return tmp\n",
        "def min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1, -1):\n        for j in range(len(A[i])):\n            memo[j] = A[i][j] + min(memo[j], memo[j + 1])\n    return memo[0]\n"
    ],
    "test_list": [
        [
            "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
            "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
            "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
        ],
        [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == \"None\"",
            "assert first_repeated_char(\"123123\") == \"1\""
        ],
        [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ],
        [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ],
        [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ],
        [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ],
        [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ],
        [
            "assert bell_number(2) == 2",
            "assert bell_number(3) == 5",
            "assert bell_number(4) == 15"
        ],
        [
            "assert floor_min(10,20,30) == 15",
            "assert floor_min(1,2,1) == 0",
            "assert floor_min(11,10,9) == 9"
        ],
        [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ],
        [
            "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
            "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
            "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
        ],
        [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ],
        [
            "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
            "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
            "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
        ],
        [
            "assert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cumulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cumulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ],
        [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ],
        [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ],
        [
            "assert min_jumps(3,4,11)==3.5",
            "assert min_jumps(3,4,0)==0",
            "assert min_jumps(11,14,11)==1"
        ],
        [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ],
        [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ],
        [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
            "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
        ],
        [
            "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
            "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
            "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        ],
        [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ],
        [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ],
        [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ],
        [
            "assert swap_list([1,2,3]) == [3,2,1]",
            "assert swap_list([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_list([4,5,6]) == [6,5,4]"
        ],
        [
            "assert triangle_area(0) == 0",
            "assert triangle_area(-1) == -1",
            "assert triangle_area(2) == 4"
        ],
        [
            "assert find_first_missing([0,1,2,3],0,3) == 4",
            "assert find_first_missing([0,1,2,6,9],0,4) == 3",
            "assert find_first_missing([2,3,5,8,9],0,4) == 0"
        ],
        [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ],
        [
            "assert split([1,2,3,4,5]) == [2,4]",
            "assert split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ],
        [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ],
        [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The Avengers') == 'The_Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ],
        [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ],
        [
            "assert pair_or_sum([5,9,7,6],4) == 47",
            "assert pair_or_sum([7,3,5],3) == 12",
            "assert pair_or_sum([7,3],2) == 4"
        ],
        [
            "assert even_power_sum(2) == 272",
            "assert even_power_sum(3) == 1568",
            "assert even_power_sum(4) == 5664"
        ],
        [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ],
        [
            "assert check_solution(2,0,2) == \"Yes\"",
            "assert check_solution(2,-5,2) == \"Yes\"",
            "assert check_solution(1,2,3) == \"No\""
        ],
        [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ],
        [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,70)==86",
            "assert wind_chill(10,100)==116"
        ],
        [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ],
        [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ],
        [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ],
        [
            "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
            "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
            "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
        ],
        [
            "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
        ],
        [
            "assert reverse_array_upto_k([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_array_upto_k([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_array_upto_k([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ],
        [
            "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
            "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
            "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
        ],
        [
            "assert no_of_cubes(2,1) == 8",
            "assert no_of_cubes(5,2) == 64",
            "assert no_of_cubes(1,1) == 1"
        ],
        [
            "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
            "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
            "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
        ],
        [
            "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
            "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
            "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
        ],
        [
            "assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
            "assert sum_range_list([1,2,3,4,5],1,2) == 5",
            "assert sum_range_list([1,0,1,2,5,6],4,5) == 11"
        ],
        [
            "assert are_equal([1,2,3],[3,2,1],3,3) == True",
            "assert are_equal([1,1,1],[2,2,2],3,3) == False",
            "assert are_equal([8,9],[4,5,6],2,3) == False"
        ],
        [
            "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
            "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
            "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
        ],
        [
            "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
            "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
            "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
        ],
        [
            "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
            "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
            "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
        ],
        [
            "assert rectangle_perimeter(10,20)==60",
            "assert rectangle_perimeter(10,5)==30",
            "assert rectangle_perimeter(4,2)==12"
        ],
        [
            "assert fifth_power_sum(2) == 33",
            "assert fifth_power_sum(4) == 1300",
            "assert fifth_power_sum(3) == 276"
        ],
        [
            "assert find_min_sum([3,2,1],[2,1,3],3) == 0",
            "assert find_min_sum([1,2,3],[4,5,6],3) == 9",
            "assert find_min_sum([4,1,8,7],[2,3,6,5],4) == 6"
        ],
        [
            "assert first_digit(5) == 1",
            "assert first_digit(10) == 3",
            "assert first_digit(7) == 5"
        ],
        [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
            "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
            "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
        ],
        [
            "assert repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
            "assert repeat([-1, 1, -1, 8]) == [-1]",
            "assert repeat([1, 2, 3, 1, 2,]) == [1, 2]"
        ],
        [
            "assert find_points(5,10,1,5) == (1,10)",
            "assert find_points(3,5,7,9) == (3,9)",
            "assert find_points(1,5,2,8) == (1,8)"
        ],
        [
            "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
            "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
            "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
        ],
        [
            "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
            "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
            "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
        ],
        [
            "assert find_max_val(15, 10, 5) == 15",
            "assert find_max_val(187, 10, 5) == 185",
            "assert find_max_val(16, 11, 1) == 12"
        ],
        [
            "assert average_even(2) == 2",
            "assert average_even(4) == 3",
            "assert average_even(100) == 51"
        ],
        [
            "assert move_last([1,2,3,4]) == [2,3,4,1]",
            "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
            "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
        ],
        [
            "assert count_char(\"Python\",'o')==1",
            "assert count_char(\"little\",'t')==2",
            "assert count_char(\"assert\",'s')==2"
        ],
        [
            "assert check_vow('corner','AaEeIiOoUu') == 2",
            "assert check_vow('valid','AaEeIiOoUu') == 2",
            "assert check_vow('true','AaEeIiOoUu') ==2"
        ],
        [
            "assert replace('peep','e') == 'pep'",
            "assert replace('Greek','e') == 'Grek'",
            "assert replace('Moon','o') == 'Mon'"
        ],
        [
            "assert check_ip(\"192.168.0.1\") == 'Valid IP address'",
            "assert check_ip(\"110.234.52.124\") == 'Valid IP address'",
            "assert check_ip(\"366.1.2.2\") == 'Invalid IP address'"
        ],
        [
            "assert decreasing_trend([-4,-3,-2,-1]) == True",
            "assert decreasing_trend([1,2,3]) == True",
            "assert decreasing_trend([3,2,1]) == False"
        ],
        [
            "assert set_right_most_unset_bit(21) == 23",
            "assert set_right_most_unset_bit(11) == 15",
            "assert set_right_most_unset_bit(15) == 15"
        ],
        [
            "assert max_of_three(10,20,30)==30",
            "assert max_of_three(55,47,39)==55",
            "assert max_of_three(10,49,30)==49"
        ],
        [
            "assert convert([1,2,3]) == 123",
            "assert convert([4,5,6]) == 456",
            "assert convert([7,8,9]) == 789"
        ],
        [
            "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
        ],
        [
            "assert sum_nums(2,10,11,20)==20",
            "assert sum_nums(15,17,1,10)==32",
            "assert sum_nums(10,15,5,30)==20"
        ],
        [
            "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
            "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
            "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
        ],
        [
            "assert validity_triangle(60,50,90)==False",
            "assert validity_triangle(45,75,60)==True",
            "assert validity_triangle(30,50,100)==True"
        ],
        [
            "assert remove_spaces(\"a b c\") == \"abc\"",
            "assert remove_spaces(\"1 2 3\") == \"123\"",
            "assert remove_spaces(\" b c\") == \"bc\""
        ],
        [
            "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
            "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
            "assert access_key({'program':15,'computer':45},1)== 'computer'"
        ],
        [
            "assert increasing_trend([1,2,3,4]) == True",
            "assert increasing_trend([4,3,2,1]) == False",
            "assert increasing_trend([0,1,4,9]) == True"
        ],
        [
            "assert smallest_divisor(10) == 2",
            "assert smallest_divisor(25) == 5",
            "assert smallest_divisor(31) == 31"
        ],
        [
            "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
            "assert mul_list([1,2],[3,4])==[3,8]",
            "assert mul_list([90,120],[50,70])==[4500,8400]"
        ],
        [
            "assert sum_square(25) == True",
            "assert sum_square(24) == False",
            "assert sum_square(17) == True"
        ],
        [
            "assert count_char(\"abcac\",'a') == 4",
            "assert count_char(\"abca\",'c') == 2",
            "assert count_char(\"aba\",'a') == 7"
        ],
        [
            "assert sum_of_primes(10) == 17",
            "assert sum_of_primes(20) == 77",
            "assert sum_of_primes(5) == 10"
        ],
        [
            "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
            "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
            "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
        ],
        [
            "assert recur_gcd(12,14) == 2",
            "assert recur_gcd(13,17) == 1",
            "assert recur_gcd(9, 3) == 3"
        ],
        [
            "assert len_complex(3,4)==5.0",
            "assert len_complex(9,10)==13.45362404707371",
            "assert len_complex(7,9)==11.40175425099138"
        ],
        [
            "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
            "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
            "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
        ],
        [
            "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
            "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
            "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
        ],
        [
            "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
            "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
            "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
        ],
        [
            "assert last_two_digits(7) == 40",
            "assert last_two_digits(5) == 20",
            "assert last_two_digits(2) == 2"
        ],
        [
            "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
            "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
            "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
        ],
        [
            "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
            "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
            "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
        ],
        [
            "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
            "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
            "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
        ],
        [
            "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
            "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
            "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
        ],
        [
            "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
            "assert count_even([10,15,14,13,-18,12,-20])==5",
            "assert count_even([1, 2, 4, 8, 9])==3"
        ],
        [
            "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
            "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
            "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
        ],
        [
            "assert min_swaps(\"1101\",\"1110\") == 1",
            "assert min_swaps(\"1111\",\"0100\") == \"Not Possible\"",
            "assert min_swaps(\"1110000\",\"0001101\") == 3"
        ],
        [
            "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
            "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
            "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
        ],
        [
            "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
            "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
            "assert equilibrium_index([1, 2, 3]) == -1"
        ],
        [
            "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
            "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
            "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
        ],
        [
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
        ],
        [
            "assert harmonic_sum(10)==2.9289682539682538",
            "assert harmonic_sum(4)==2.083333333333333",
            "assert harmonic_sum(7)==2.5928571428571425 "
        ],
        [
            "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
            "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
            "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
        ],
        [
            "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
            "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
            "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
        ],
        [
            "assert count_set_bits(16) == 33",
            "assert count_set_bits(2) == 2",
            "assert count_set_bits(14) == 28"
        ],
        [
            "assert convert('python program') == ['python','program']",
            "assert convert('Data Analysis') ==['Data','Analysis']",
            "assert convert('Hadoop Training') == ['Hadoop','Training']"
        ],
        [
            "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
            "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
            "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
        ],
        [
            "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
            "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
            "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
        ],
        [
            "assert product_equal(2841) == True",
            "assert product_equal(1234) == False",
            "assert product_equal(1212) == False"
        ],
        [
            "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
            "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
            "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
        ],
        [
            "assert check_valid((True, True, True, True) ) == True",
            "assert check_valid((True, False, True, True) ) == False",
            "assert check_valid((True, True, True, True) ) == True"
        ],
        [
            "assert count_fac(24) == 3",
            "assert count_fac(12) == 2",
            "assert count_fac(4) == 1"
        ],
        [
            "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
            "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
            "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
        ],
        [
            "assert rombus_perimeter(10)==40",
            "assert rombus_perimeter(5)==20",
            "assert rombus_perimeter(4)==16"
        ],
        [
            "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
            "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
            "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
        ],
        [
            "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
            "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
            "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
        ],
        [
            "assert text_match(\"ac\")==('Found a match!')",
            "assert text_match(\"dc\")==('Not matched!')",
            "assert text_match(\"abba\")==('Found a match!')"
        ],
        [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ],
        [
            "assert maxaverageofpath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
            "assert maxaverageofpath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
            "assert maxaverageofpath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
        ],
        [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ],
        [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
        ],
        [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62"
        ],
        [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
        ],
        [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
        ],
        [
            "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
            "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
            "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
        ],
        [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ],
        [
            "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
            "assert add_list([1,2],[3,4])==[4,6]",
            "assert add_list([10,20],[50,70])==[60,90]"
        ],
        [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
        ],
        [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ],
        [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ],
        [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        [
            "assert sum_of_subarray_prod([1,2,3],3) == 20",
            "assert sum_of_subarray_prod([1,2],2) == 5",
            "assert sum_of_subarray_prod([1,2,3,4],4) == 84"
        ],
        [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ],
        [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        [
            "assert check_str(\"annie\") == 'Valid'",
            "assert check_str(\"dawood\") == 'Invalid'",
            "assert check_str(\"Else\") == 'Valid'"
        ],
        [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ],
        [
            "assert find_index(2) == 4",
            "assert find_index(3) == 14",
            "assert find_index(4) == 45"
        ],
        [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ],
        [
            "assert all_characters_same(\"python\") == False",
            "assert all_characters_same(\"aaa\") == True",
            "assert all_characters_same(\"data\") == False"
        ],
        [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ],
        [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        ],
        [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ],
        [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ],
        [
            "assert sector_area(4,45)==6.285714285714286",
            "assert sector_area(9,45)==31.82142857142857",
            "assert sector_area(9,360)==None"
        ],
        [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
        ],
        [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ],
        [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ],
        [
            "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
        ],
        [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ],
        [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ],
        [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
        ],
        [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ],
        [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ],
        [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
        ],
        [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
        ],
        [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False"
        ],
        [
            "assert unique_element([1,1,1],3) == 'YES'",
            "assert unique_element([1,2,1,2],4) == 'NO'",
            "assert unique_element([1,2,3,4,5],5) == 'NO'"
        ],
        [
            "assert arc_length(9,45)==3.5357142857142856",
            "assert arc_length(9,480)==None",
            "assert arc_length(5,270)==11.785714285714285"
        ],
        [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ],
        [
            "assert find_min_diff((1,5,3,19,18,25),6) == 1",
            "assert find_min_diff((4,3,2,6),4) == 1",
            "assert find_min_diff((30,5,20,9),4) == 4"
        ],
        [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') ==1",
            "assert number_ctr('123') == 3"
        ],
        [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ],
        [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ],
        [
            "assert get_pairs_count([1,1,1,1],4,2) == 6",
            "assert get_pairs_count([1,5,7,-1,5],5,6) == 3",
            "assert get_pairs_count([1,-2,3],3,1) == 1"
        ],
        [
            "assert check_odd_parity(13) == True",
            "assert check_odd_parity(21) == True",
            "assert check_odd_parity(18) == False"
        ],
        [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ],
        [
            "assert odd_num_sum(2) == 82",
            "assert odd_num_sum(3) == 707",
            "assert odd_num_sum(4) == 3108"
        ],
        [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ],
        [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ],
        [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
        ],
        [
            "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
            "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
            "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
        ],
        [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ],
        [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ],
        [
            "assert find_sum([1,2,3,1,1,4,5,6],8) == 21",
            "assert find_sum([1,10,9,4,2,10,10,45,4],9) == 71",
            "assert find_sum([12,10,9,45,2,10,10,45,10],9) == 78"
        ],
        [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ],
        [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ],
        [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ],
        [
            "assert count_divisors(10) == \"Even\"",
            "assert count_divisors(100) == \"Odd\"",
            "assert count_divisors(125) == \"Even\""
        ],
        [
            "assert odd_length_sum([1,2,4]) == 14",
            "assert odd_length_sum([1,2,1,2]) == 15",
            "assert odd_length_sum([1,7]) == 8"
        ],
        [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ],
        [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ],
        [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
        ],
        [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ],
        [
            "assert text_match_three(\"ac\")==('Not matched!')",
            "assert text_match_three(\"dc\")==('Not matched!')",
            "assert text_match_three(\"abbbba\")==('Found a match!')"
        ],
        [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ],
        [
            "assert perimeter_polygon(4,20)==80",
            "assert perimeter_polygon(10,15)==150",
            "assert perimeter_polygon(9,7)==63"
        ],
        [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ],
        [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
        ],
        [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ],
        [
            "assert last([1,2,3],1,3) == 0",
            "assert last([1,1,1,2,3,4],1,6) == 2",
            "assert last([2,3,2,3,6,8,9],3,8) == 3"
        ],
        [
            "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
            "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
            "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
        ],
        [
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
        ],
        [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ],
        [
            "assert sum_in_range(2,5) == 8",
            "assert sum_in_range(5,7) == 12",
            "assert sum_in_range(7,13) == 40"
        ],
        [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ],
        [
            "assert left_rotate(16,2) == 64",
            "assert left_rotate(10,2) == 40",
            "assert left_rotate(99,3) == 792"
        ],
        [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')"
        ],
        [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ],
        [
            "assert count_rotation([3,2,1],3) == 1",
            "assert count_rotation([4,5,1,2,3],5) == 2",
            "assert count_rotation([7,8,9,1,2,3],6) == 3"
        ],
        [
            "assert is_perfect_square(10) == False",
            "assert is_perfect_square(36) == True",
            "assert is_perfect_square(14) == False"
        ],
        [
            "assert is_product_even([1,2,3],3) == True",
            "assert is_product_even([1,2,1,4],4) == True",
            "assert is_product_even([1,1],2) == False"
        ],
        [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
            "assert max_sum_list([[2,3,1]])==[2,3,1] "
        ],
        [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ],
        [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ],
        [
            "assert check_k((10, 4, 5, 6, 8), 6) == True",
            "assert check_k((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_k((7, 8, 9, 44, 11, 12), 11) == True"
        ],
        [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ],
        [
            "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
            "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
            "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        ],
        [
            "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
            "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
            "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
        ],
        [
            "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
            "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
            "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
        ],
        [
            "assert string_length('python')==6",
            "assert string_length('program')==7",
            "assert string_length('language')==8"
        ],
        [
            "assert rombus_area(10,20)==100",
            "assert rombus_area(10,5)==25",
            "assert rombus_area(4,2)==4"
        ],
        [
            "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
            "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
            "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        ],
        [
            "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
            "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
            "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
        ],
        [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
        ],
        [
            "assert lower_ctr('abc') == 3",
            "assert lower_ctr('string') == 6",
            "assert lower_ctr('Python') == 5"
        ],
        [
            "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
            "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
            "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
        ],
        [
            "assert check_monthnum_number(2)==True",
            "assert check_monthnum_number(1)==False",
            "assert check_monthnum_number(3)==False"
        ],
        [
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
            "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
        ],
        [
            "assert pass_validity(\"password\")==False",
            "assert pass_validity(\"Password@10\")==True",
            "assert pass_validity(\"password@10\")==False"
        ],
        [
            "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
            "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
            "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
        ],
        [
            "assert remove_even([1,3,5,2]) == [1,3,5]",
            "assert remove_even([5,6,7]) == [5,7]",
            "assert remove_even([1,2,3,4]) == [1,3]"
        ],
        [
            "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
            "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
            "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
        ],
        [
            "assert check_type_of_triangle(1,2,3) == \"Obtuse-angled Triangle\"",
            "assert check_type_of_triangle(2,2,2) == \"Acute-angled Triangle\"",
            "assert check_type_of_triangle(1,0,1) == \"Right-angled Triangle\""
        ],
        [
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
        ],
        [
            "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
            "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
            "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
        ],
        [
            "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
            "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
            "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
        ],
        [
            "assert round_up(123.01247,0)==124",
            "assert round_up(123.01247,1)==123.1",
            "assert round_up(123.01247,2)==123.02"
        ],
        [
            "assert count_pairs([1,1,1,1],4) == 6",
            "assert count_pairs([1,5,1],3) == 1",
            "assert count_pairs([3,2,1,7,8,9],6) == 0"
        ],
        [
            "assert extract_max('100klh564abc365bg') == 564",
            "assert extract_max('hello300how546mer231') == 546",
            "assert extract_max('its233beenalong343journey234') == 343"
        ],
        [
            "assert get_key({1:'python',2:'java'})==[1,2]",
            "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
            "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
        ],
        [
            "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
            "assert generate_matrix(2)==[[1,2],[4,3]]",
            "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
        ],
        [
            "assert slope(4,2,2,5) == -1.5",
            "assert slope(2,4,4,6) == 1",
            "assert slope(1,2,4,2) == 0"
        ],
        [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
            "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
            "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
        ],
        [
            "assert cube_sum(2) == 28",
            "assert cube_sum(3) == 153",
            "assert cube_sum(4) == 496"
        ],
        [
            "assert min_swaps(\"0011\",\"1111\") == 1",
            "assert min_swaps(\"00011\",\"01001\") == 2",
            "assert min_swaps(\"111\",\"111\") == 0"
        ],
        [
            "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
            "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
            "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
        ],
        [
            "assert check_solution(2,0,-1) == \"Yes\"",
            "assert check_solution(1,-5,6) == \"No\"",
            "assert check_solution(2,0,2) == \"Yes\""
        ],
        [
            "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
            "assert get_inv_count([8, 4, 2, 1], 4) == 6",
            "assert get_inv_count([3, 1, 2], 3) == 2"
        ],
        [
            "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
            "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
            "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
        ],
        [
            "assert nth_super_ugly_number(12,[2,7,13,19])==32",
            "assert nth_super_ugly_number(10,[2,7,13,19])==26",
            "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
        ],
        [
            "assert get_number(8,5) == 2",
            "assert get_number(7,2) == 3",
            "assert get_number(5,2) == 3"
        ],
        [
            "assert find_digits(7) == 4",
            "assert find_digits(5) == 3",
            "assert find_digits(4) == 2"
        ],
        [
            "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
            "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
            "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
        ],
        [
            "assert lcopy([1, 2, 3]) == [1, 2, 3]",
            "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
            "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
        ],
        [
            "assert area_trapezium(6,9,4)==30",
            "assert area_trapezium(10,20,30)==450",
            "assert area_trapezium(15,25,35)==700"
        ],
        [
            "assert sum(60) == 10",
            "assert sum(39) == 16",
            "assert sum(40) == 7"
        ],
        [
            "assert is_triangleexists(50,60,70)==True",
            "assert is_triangleexists(90,45,45)==True",
            "assert is_triangleexists(150,30,70)==False"
        ],
        [
            "assert sum_of_inverse_divisors(6,12) == 2",
            "assert sum_of_inverse_divisors(9,13) == 1.44",
            "assert sum_of_inverse_divisors(1,4) == 4"
        ],
        [
            "assert remove_negs([1,-2,3,-4]) == [1,3]",
            "assert remove_negs([1,2,3,-4]) == [1,2,3]",
            "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
        ],
        [
            "assert sum_of_odd_factors(30) == 24",
            "assert sum_of_odd_factors(18) == 13",
            "assert sum_of_odd_factors(2) == 1"
        ],
        [
            "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
            "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
            "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
        ],
        [
            "assert check_even_parity(10) == True",
            "assert check_even_parity(11) == False",
            "assert check_even_parity(18) == True"
        ],
        [
            "assert find_min_swaps([1,0,1,0],4) == 3",
            "assert find_min_swaps([0,1,0],3) == 1",
            "assert find_min_swaps([0,0,1,1,0],5) == 2"
        ],
        [
            "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
            "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
            "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
        ],
        [
            "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
            "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
        ],
        [
            "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
            "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
            "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
        ],
        [
            "assert check_alphanumeric(\"dawood@\") == 'Discard'",
            "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
            "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
        ],
        [
            "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
            "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
            "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
        ],
        [
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
        ],
        [
            "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
            "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
            "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
        ],
        [
            "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
            "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
            "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
        ],
        [
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
        ],
        [
            "assert check_monthnumb(\"February\")==False",
            "assert check_monthnumb(\"January\")==True",
            "assert check_monthnumb(\"March\")==True"
        ],
        [
            "assert min_num([1,2,3,4,5,6,7,8,9],9) == 1",
            "assert min_num([1,2,3,4,5,6,7,8],8) == 2",
            "assert min_num([1,2,3],3) == 2"
        ],
        [
            "assert length_of_last_word(\"python language\") == 8",
            "assert length_of_last_word(\"PHP\") == 3",
            "assert length_of_last_word(\"\") == 0"
        ],
        [
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
        ],
        [
            "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
            "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
            "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
        ],
        [
            "assert are_rotations(\"abc\",\"cba\") == False",
            "assert are_rotations(\"abcd\",\"cdba\") == False",
            "assert are_rotations(\"abacd\",\"cdaba\") == True"
        ],
        [
            "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
            "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
            "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
        ],
        [
            "assert fibonacci(7) == 13",
            "assert fibonacci(8) == 21",
            "assert fibonacci(9) == 34"
        ],
        [
            "assert check_concat(\"abcabcabc\",\"abc\") == True",
            "assert check_concat(\"abcab\",\"abc\") == False",
            "assert check_concat(\"aba\",\"ab\") == False"
        ],
        [
            "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
            "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
            "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
        ],
        [
            "assert lcm(4,6) == 12",
            "assert lcm(15,17) == 255",
            "assert lcm(2,6) == 6"
        ],
        [
            "assert sort_string(\"cba\") == \"abc\"",
            "assert sort_string(\"data\") == \"aadt\"",
            "assert sort_string(\"zxy\") == \"xyz\""
        ],
        [
            "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
            "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
            "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
        ],
        [
            "assert text_match(\"aabbbbd\") == 'Not matched!'",
            "assert text_match(\"aabAbbbc\") == 'Not matched!'",
            "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
        ],
        [
            "assert check_solution(2,5,2) == \"2 solutions\"",
            "assert check_solution(1,1,1) == \"No solutions\"",
            "assert check_solution(1,2,1) == \"1 solution\""
        ],
        [
            "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
            "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
            "assert sum_even_odd([1,5,7,9,10])==11"
        ],
        [
            "assert parallelogram_perimeter(10,20)==400",
            "assert parallelogram_perimeter(15,20)==600",
            "assert parallelogram_perimeter(8,9)==144"
        ],
        [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
        ],
        [
            "assert all_bits_set_in_the_given_range(10,2,1) == True ",
            "assert all_bits_set_in_the_given_range(5,2,4) == False",
            "assert all_bits_set_in_the_given_range(22,2,3) == True "
        ],
        [
            "assert is_isomorphic(\"paper\",\"title\") == True",
            "assert is_isomorphic(\"ab\",\"ba\") == True",
            "assert is_isomorphic(\"ab\",\"aa\") == False"
        ],
        [
            "assert sum_num((8, 2, 3, 0, 7))==4.0",
            "assert sum_num((-10,-20,-30))==-20.0",
            "assert sum_num((19,15,18))==17.333333333333332"
        ],
        [
            "assert is_odd(5) == True",
            "assert is_odd(6) == False",
            "assert is_odd(7) == True"
        ],
        [
            "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
        ],
        [
            "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
            "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
            "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
        ],
        [
            "assert find_extra([1,2,3,4],[1,2,3],3) == 3",
            "assert find_extra([2,4,6,8,10],[2,4,6,8],4) == 4",
            "assert find_extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
        ],
        [
            "assert same_length(12,1) == False",
            "assert same_length(2,2) == True",
            "assert same_length(10,20) == True"
        ],
        [
            "assert remove_spaces('python  program')==('python program')",
            "assert remove_spaces('python   programming    language')==('python programming language')",
            "assert remove_spaces('python                     program')==('python program')"
        ],
        [
            "assert extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
            "assert extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
            "assert extract([[1, 2, 3], [4, 5]]) == [3, 5]"
        ],
        [
            "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
            "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
            "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
        ],
        [
            "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
            "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
            "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
        ],
        [
            "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
            "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
            "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
        ],
        [
            "assert is_word_present(\"machine learning\",\"machine\") == True",
            "assert is_word_present(\"easy\",\"fun\") == False",
            "assert is_word_present(\"python language\",\"code\") == False"
        ],
        [
            "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
            "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
            "assert extract_elements([0,0,0,0,0],5)==[0]"
        ],
        [
            "assert check([3,2,1,2,3,4],6) == True",
            "assert check([2,1,4,5,1],5) == True",
            "assert check([1,2,2,1,2,3],6) == True"
        ],
        [
            "assert match_num('5-2345861')==True",
            "assert match_num('6-2345861')==False",
            "assert match_num('78910')==False"
        ],
        [
            "assert smallest_multiple(13)==360360",
            "assert smallest_multiple(2)==2",
            "assert smallest_multiple(1)==1"
        ],
        [
            "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
            "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
            "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
        ],
        [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(5) == 4",
            "assert count_unset_bits(14) == 17"
        ],
        [
            "assert even_num(13.5)==False",
            "assert even_num(0)==True",
            "assert even_num(-9)==False"
        ],
        [
            "assert sum_of_square(4) == 70",
            "assert sum_of_square(5) == 252",
            "assert sum_of_square(2) == 6"
        ],
        [
            "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
            "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
            "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
        ],
        [
            "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
            "assert lucky_num(5)==[1, 3, 7, 9, 13]",
            "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
        ],
        [
            "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
            "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
            "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
        ],
        [
            "assert previous_palindrome(99)==88",
            "assert previous_palindrome(1221)==1111",
            "assert previous_palindrome(120)==111"
        ],
        [
            "assert check_date(11,11,2002)==True",
            "assert check_date(13,11,2002)==False",
            "assert check_date('11','11','2002')==True"
        ],
        [
            "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
            "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
            "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
        ],
        [
            "assert int(lobb_num(5, 3)) == 35",
            "assert int(lobb_num(3, 2)) == 5",
            "assert int(lobb_num(4, 2)) == 20"
        ],
        [
            "assert end_num('abcdef')==False",
            "assert end_num('abcdef7')==True",
            "assert end_num('abc')==False"
        ],
        [
            "assert is_two_alter(\"abab\") == True",
            "assert is_two_alter(\"aaaa\") == False",
            "assert is_two_alter(\"xyz\") == False"
        ],
        [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
        ],
        [
            "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
            "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
            "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
        ],
        [
            "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
            "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
            "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
        ],
        [
            "assert coin_change([1, 2, 3],3,4)==4",
            "assert coin_change([4,5,6,7,8,9],6,9)==2",
            "assert coin_change([4,5,6,7,8,9],6,4)==1"
        ],
        [
            "assert multiply_list([1,-2,3]) == -6",
            "assert multiply_list([1,2,3,4]) == 24",
            "assert multiply_list([3,1,2,3]) == 18"
        ],
        [
            "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
            "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
            "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
        ],
        [
            "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
            "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
            "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
        ],
        [
            "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
            "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
            "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
        ],
        [
            "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
            "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
            "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
        ],
        [
            "assert max_of_two(10,20)==20",
            "assert max_of_two(19,15)==19",
            "assert max_of_two(-10,-20)==-10"
        ],
        [
            "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
            "assert mutiple_tuple((1,2,3)) == 6",
            "assert mutiple_tuple((-2,-4,-6)) == -48"
        ],
        [
            "assert rencontres_number(7, 2) == 924",
            "assert rencontres_number(3, 0) == 2",
            "assert rencontres_number(3, 1) == 3"
        ],
        [
            "assert (max_height(root)) == 3",
            "assert (max_height(root1)) == 5 ",
            "assert (max_height(root2)) == 4"
        ],
        [
            "assert change_date_format('2026-01-02')=='02-01-2026'",
            "assert change_date_format('2021-01-04')=='04-01-2021'",
            "assert change_date_format('2030-06-06')=='06-06-2030'"
        ],
        [
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
            "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
        ],
        [
            "assert text_match(\"msb\") == 'Not matched!'",
            "assert text_match(\"a0c\") == 'Found a match!'",
            "assert text_match(\"abbc\") == 'Found a match!'"
        ],
        [
            "assert sum_series(7)==784",
            "assert sum_series(5)==225",
            "assert sum_series(15)==14400"
        ],
        [
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
        ],
        [
            "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
            "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
            "assert camel_to_snake('QuadCore') == 'quad_core'"
        ],
        [
            "assert dealnnoy_num(3, 4) == 129",
            "assert dealnnoy_num(3, 3) == 63",
            "assert dealnnoy_num(4, 5) == 681"
        ],
        [
            "assert series_sum(6)==91",
            "assert series_sum(7)==140",
            "assert series_sum(12)==650"
        ],
        [
            "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
            "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
            "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
        ],
        [
            "assert max_char(\"hello world\")==('l')",
            "assert max_char(\"hello \")==('l')",
            "assert max_char(\"python pr\")==('p')"
        ],
        [
            "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
            "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
            "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
        ],
        [
            "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
            "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
            "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
        ],
        [
            "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
            "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
            "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
        ],
        [
            "assert count_elim([10,20,30,(10,20),40])==3",
            "assert count_elim([10,(20,30),(10,20),40])==1",
            "assert count_elim([(10,(20,30,(10,20),40))])==0"
        ],
        [
            "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
            "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
            "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
        ],
        [
            "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
            "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
            "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
        ],
        [
            "assert num_position(\"there are 70 flats in this apartment\")==10",
            "assert num_position(\"every adult have 32 teeth\")==17",
            "assert num_position(\"isha has 79 chocolates in her bag\")==9"
        ],
        [
            "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
            "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
            "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
        ],
        [
            "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
        ],
        [
            "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
            "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
        ],
        [
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
        ],
        [
            "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
            "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
            "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
        ],
        [
            "assert chinese_zodiac(1997)==('Ox')",
            "assert chinese_zodiac(1998)==('Tiger')",
            "assert chinese_zodiac(1994)==('Dog')"
        ],
        [
            "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
            "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
            "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
        ],
        [
            "assert ncr_mod_p(10, 2, 13) == 6",
            "assert ncr_mod_p(11, 3, 14) == 11",
            "assert ncr_mod_p(18, 14, 19) == 1"
        ],
        [
            "assert subset([1, 2, 3, 4],4) == 1",
            "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
            "assert subset([1, 2, 3 ],3) == 1"
        ],
        [
            "assert profit_amount(1500,1200)==300",
            "assert profit_amount(100,200)==None",
            "assert profit_amount(2000,5000)==None"
        ],
        [
            "assert is_abundant(12)==True",
            "assert is_abundant(13)==False",
            "assert is_abundant(9)==False"
        ],
        [
            "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
            "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
            "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
        ],
        [
            "assert get_first_set_bit_pos(12) == 3",
            "assert get_first_set_bit_pos(18) == 2",
            "assert get_first_set_bit_pos(16) == 5"
        ],
        [
            "assert int_to_roman(1)==(\"I\")",
            "assert int_to_roman(50)==(\"L\")",
            "assert int_to_roman(4)==(\"IV\")"
        ],
        [
            "assert average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
            "assert average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
            "assert average([1,2,3]) == 2"
        ],
        [
            "assert get_noofways(4)==3",
            "assert get_noofways(3)==2",
            "assert get_noofways(5)==5"
        ],
        [
            "assert roman_to_int('MMMCMLXXXVI')==3986",
            "assert roman_to_int('MMMM')==4000",
            "assert roman_to_int('C')==100"
        ],
        [
            "assert sum_even(2,5) == 6",
            "assert sum_even(3,8) == 18",
            "assert sum_even(4,6) == 10"
        ],
        [
            "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
            "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
            "assert discriminant_value(0,0,9)==(\"one solution\",0)"
        ],
        [
            "assert word_len(\"program\") == False",
            "assert word_len(\"solution\") == True",
            "assert word_len(\"data\") == True"
        ],
        [
            "assert camel_to_snake('PythonProgram')==('python_program')",
            "assert camel_to_snake('pythonLanguage')==('python_language')",
            "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
        ],
        [
            "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
            "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
            "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
        ],
        [
            "assert check(\"SEEquoiaL\") == 'accepted'",
            "assert check('program') == \"not accepted\"",
            "assert check('fine') == \"not accepted\""
        ],
        [
            "assert floor_max(11,10,9) == 9",
            "assert floor_max(5,7,4) == 2",
            "assert floor_max(2,2,1) == 1"
        ],
        [
            "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
            "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
            "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
        ],
        [
            "assert min_of_two(10,20)==10",
            "assert min_of_two(19,15)==15",
            "assert min_of_two(-10,-20)==-20"
        ],
        [
            "assert maximum_segments(7, 5, 2, 5) == 2",
            "assert maximum_segments(17, 2, 1, 3) == 17",
            "assert maximum_segments(18, 16, 3, 6) == 6"
        ],
        [
            "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
            "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
            "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
        ],
        [
            "assert left_rotate(\"python\",2) == \"thonpy\"   ",
            "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
            "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
        ],
        [
            "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
            "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
            "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
        ]
    ]
}