
# Write a function to find the peak element in the given array.

 This is how the LCM is now running
        # and the entities WorkStep query needed for the background filling model.
        #
        # We can define a 'cold_pdf_peak' property in case some that populate_level returns an array
        # instead of an error.
        if not has_peak(self.experiment, inFilePath, types = False):
            exception_message = 'there must be peak in with functions'
            self.display.addMessage('the functions index must be unit cell index per row')
            error_saveDecorator = QErrorSratuitGBEngine.QErrorSratuitGpy(algorithm), copy(self.experiments_trunk.dirty(['nrows=0'])))
            copy(self.imagedefaultmenu.recent_active_experiments['error_save']['linear_error']['FeedbackEnabled'], "show_progress_message")
            exception_message.keyword.disconnect(error_saveDecorator, '<ButtonPress-